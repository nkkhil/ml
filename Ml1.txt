import pandas as pd
import numpy as np

df= pd.read_csv('uber.csv')

df.dtypes

df.head()

df.isnull().values.any()

df.dropna(inplace=True)

df.drop(['Unnamed: 0','key','pickup_datetime'], axis=1, inplace=True)

df.info()

df = df[(df[['fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']] != 0).all(axis=1)]

df.info()

from math import *

def distance(ilon1,ilat1,ilon2,ilat2):
    travel_distance=[]
    
    for pos in range(len(ilon1)):
        lon1,lat1,lon2,lat2 = map(radians,[ilon1[pos],ilat1[pos],ilon2[pos],ilat2[pos]])
        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
        c = 2 * asin(sqrt(a))
        r = 6371
        q =(c * r)
        travel_distance.append(q)
    return travel_distance


df['distance_travel_km']= distance(df['pickup_longitude'].to_numpy(),df['pickup_latitude'].to_numpy(),df['dropoff_longitude'].to_numpy(),df['dropoff_latitude'].to_numpy())

df.head()

df.describe().transpose()

df.columns[df.dtypes == 'object']

####Outliers####

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(20,30))
for i , variable in enumerate(df.iloc[: , 0::]):
    plt.subplot(6,5,i+1)
    plt.boxplot(df[variable] , whis = 1.5)
    plt.tight_layout()
    plt.title(variable)
plt.show()

def remove_outlier(df1 , col):
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1-1.5*IQR
    upper_whisker = Q3+1.5*IQR
    df[col] = np.clip(df1[col] , lower_whisker , upper_whisker)
    return df1

def treat_outliers_all(df1 , col_list):
    for c in col_list:
        df1 = remove_outlier(df , c)
    return df1

df = treat_outliers_all(df , df.iloc[: , 0::])

plt.figure(figsize=(20,30))
for i , variable in enumerate(df.iloc[: , 0::]):
    plt.subplot(6,5,i+1)
    plt.boxplot(df[variable] , whis = 1.5)
    plt.tight_layout()
    plt.title(variable)
plt.show()


x =  df.drop('fare_amount',axis = 1)
y = pd.DataFrame(df['fare_amount'])

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = 0.33)

from sklearn.linear_model import LinearRegression
regression = LinearRegression()

regression.intercept_
regression.coef_

prediction = regression.predict(X_test)
print(prediction)
y_test


from sklearn.metrics import r2_score
r2_score(y_test,prediction)


from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test,prediction)
MSE 

RMSE = np.sqrt(MSE)
RMSE



from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=100)
rf.fit(X_train,y_train)
y_pred = rf.predict(X_test)
y_pred

R2_Random = r2_score(y_test,y_pred)
R2_Random
MSE_Random = mean_squared_error(y_test,y_pred)
MSE_Random
RMSE_Random = np.sqrt(MSE_Random)
RMSE_Random




