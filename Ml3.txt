import pandas as pd
import numpy as np

df= pd.read_csv('diabetes.csv')

df.shape

df.head()

df.isnull().values.any()

df.describe()

df.dtypes

import seaborn as sns
import matplotlib.pyplot as plt

x = df.drop('Outcome', axis=1)
x.shape
x


y = df['Outcome']
y.shape
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 1)
x_train.shape, x_test.shape

print("The shape of X_train is:",x_train.shape)

print("The shape of X_test is:",x_test.shape)

print("The shape of y_train is:",y_train.shape)

print("The shape of y_test is:",y_test.shape)

from sklearn.metrics import accuracy_score
import sklearn.metrics as metrics
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

from sklearn.neighbors import KNeighborsClassifier  
knn= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  
knn.fit(x_train, y_train)

y_test_knn = knn.predict(x_test)
y_train_knn = knn.predict(x_train)

confusion_matrix_knn = confusion_matrix(y_test, y_test_knn)
print("Confusion Matrix - KNN")
print(confusion_matrix_knn)

classification_report_knn = classification_report(y_test, y_test_knn)
print("Classification Report - KNN")
print(classification_report_knn)


tn, fp, fn, tp = confusion_matrix(y_test, y_test_knn).ravel()

accuracy  =(tp+tn)/(tp+tn+fp+fn)
precision =(tp)/(tp+fp)
recall  =(tp)/(tp+fn)
f1 =2*(( precision_score * recall_score)/( precision_score + recall_score))


print('Accuracy:\t',accuracy*100,
    '\nPrecision:\t',precision*100,
    '\nRecall: \t',recall*100,
    '\nF1-Score:\t',f1*100)

